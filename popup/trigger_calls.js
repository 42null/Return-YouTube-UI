/*
The starting point of this file started as a fork from the example repository in
https://github.com/mdn/webextensions-examples/tree/master/beastify (beastify.css)
*/


const KEY_STORAGE_LOCAL_APPLYING_SETTINGS = "applying_settings";
const KEY_STORAGE_LOCAL_APP_PREFERENCES   = "app_preferences";
const settingsListElement = document.querySelector("#settingsOptionsList");
let applySettings = {
  "UN_ROUNDED_VIEWS": true,
  "UN_ROUNDED_LINK_WINDOWS": true,
  "UN_ROUNDED_EXPANDING_HOVER": true,
  "PROPER_DATES": true,
  "SUBSCRIBE_BUTTON_COLOR": true,
  "SAVE_VISIBLE_BEFORE_CLIP": true,
  "SHOW_VIDEO_LENGTH_IN_NOTIFICATIONS": false,
  "PERCENT_MORE_SPACE_TO_ACTIONS_BAR": false
};
let appPreferences = {
  "color": "blue",
  "size": "10pt"
};

// SETTINGS STORAGE //TODO: Move to own file

// The following method was originally generated by ChatGPT
function retrieveData(key) {
  return new Promise((resolve, reject) => {
    const data = localStorage.getItem(key);
    if (data === null) {
      resolve(null);
    } else {
      resolve(JSON.parse(data));
    }
  });
}

function saveData(key, data) {
  data = JSON.stringify(data);
  localStorage.setItem(key, data);
  console.log("Storing data at " + key);
  // console.log("saveData data = "+data);
}


retrieveData(KEY_STORAGE_LOCAL_APPLYING_SETTINGS).then((result) => {
  console.log("Retrieved settings data is: "+result);
  if(result){
    applySettings = result;
  }else{
    if (typeof applySettings === "object" && applySettings !== null) {
    } else {
      console.error("applySettings is not an object or is null");
      return;
    }
    console.log("Retrieved "+Object.keys(applySettings).length+" keys");
  }



  // Rest of the code to initialize the table
  console.log("Settings used:");
  const keys = Object.keys(applySettings);
  for(let i = 0; i < keys.length; i++) {
    const key = keys[i];
    const name = key;//TODO: keep this way?
    const value = applySettings[keys[i]];
    console.log("   "+key+": "+value);

    // Table Builder
    const row = settingsListElement.insertRow();
    const cell1 = row.insertCell(0);
    const cell2 = row.insertCell(1);
    cell1.innerText = name;

    if(typeof value == "boolean"){
      const label = document.createElement('label');
      label.classList.add("switch");
      const input = document.createElement('input');
      input.type = "checkbox";
      input.id   = "idAuto_"+name;
      input.name = "nameAuto_"+name;
      input.checked = value;

      const span = document.createElement("span");
      span.classList.add("slider","round");//TODO: Make option for without round

      label.appendChild(input);
      label.appendChild(span);
      cell2.appendChild(label);

      // const element = document.getElementById();
      label.addEventListener('change', async event => {
        // console.log("switch = "+input.name+" "+value);
        // applySettings[keys[i]] = input.checked;
        // console.log("switch2 = "+input.name+" "+value);
        // label.value = input.checked;
        // saveData(KEY_STORAGE_LOCAL_APPLYING_SETTINGS, applySettings);
      });
    }
  }
});

/**
 * Listen for clicks on the buttons, and send the appropriate message to
 * the content script in the page.
 */
function listenForClicks() {
  document.addEventListener("click", (e) => {

    /**
     * Remove the page-hiding CSS from the active tab,
     * send a "reset" message to the content script in the active tab.
     */
    function reapplyGeneratedJS(tabs) {
      browser.tabs.sendMessage(tabs[0].id, {
        command: "ManuallyReApplyJSPageModifications",//TODO: Come up with better message
      });

    }

    /**
     * Just log the error to the console.
     */
    function reportError(error) {
      console.error(`[Return Youtube UI]: Could not edit page, most likely page is not permitted in manifest: ${error}`);
    }

    /**
     * Get current tab, for selecting tabs see for others: https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/Tabs/query
     * then call functions as appropriate.
     */

    if (e.target.type === "submit") {
      if (e.target.id === "reloadExtension") {
        browser.runtime.reload();
      } else if (e.target.id === "settingsPageButton") {
        if (settingsListElement.classList.contains("hidden")) {

          settingsListElement.classList.remove("hidden");
        } else {
          settingsListElement.classList.add("hidden");
        }


      } else if (e.target.id === "ManuallyReApplyJSPageModifications") {
        browser.tabs.query({currentWindow: true, active: true}).then(reapplyGeneratedJS).catch(reportError);//TODO: Make double check for if a youtube page.
      }
    } else if (e.target.type === "checkbox") {
      console.log(e.target.attributes);

      // e.target.value = e.target.value === 'false';//Set value to displayed look
      console.log(e.target.checked);
      applySettings[e.target.id.replace("idAuto_", "")] = e.target.checked;
      console.log("switch2 = " + applySettings[e.target.id.replace("idAuto_", "")]);
      saveData(KEY_STORAGE_LOCAL_APPLYING_SETTINGS, applySettings);
    } else {

    }
  });
}

/**
 * There was an error executing the script.
 * Display the popup's error message, and hide the normal UI.
 */
function reportExecuteScriptError(error) {
  document.querySelector("#popup-content").classList.add("hidden");
  document.querySelector("#error-content").classList.remove("hidden");
  console.error(`[Return Youtube UI]: Failed to execute content script: ${error.message}`);
}

/**
 * When the popup loads, inject a content script into the active tab,
 * and add a click handler.
 * If we couldn't inject the script, handle the error.
 */
browser.tabs.executeScript({file: "/content_scripts/function_broker.js"})
    .then(listenForClicks)
    .catch(reportExecuteScriptError);
